syntax = "proto3";
package archway.custodian.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/api/http.proto";
import "google/protobuf/any.proto";
import "archway/custodian/v1/params.proto";

option go_package = "github.com/archway-network/archway/x/custodian/types";

// Msg defines the Msg service.
service Msg {
  // RegisterInterchainAccount registers an account on the counterparty chain.
  rpc RegisterInterchainAccount(MsgRegisterInterchainAccount) returns (MsgRegisterInterchainAccountResponse) {}
  // SubmitTx submits a transaction with msgs to the counterparty chain.
  rpc SubmitTx(MsgSubmitTx) returns (MsgSubmitTxResponse) {}
  // UpdateParams updates the custodian module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgRegisterInterchainAccount defines the Msg/RegisterInterchainAccount request type.
message MsgRegisterInterchainAccount {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  // from_address is the address of the who wants to register an ica account on the counterparty chain
  string from_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // connection_id is the connection id between the two chains
  string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
  // interchain_account_id is custom value given by the contract
  string interchain_account_id = 3 [(gogoproto.moretags) = "yaml:\"interchain_account_id\""];
}

// MsgRegisterInterchainAccountResponse defines the response for Msg/RegisterInterchainAccount
message MsgRegisterInterchainAccountResponse {}

// MsgSubmitTx defines the Msg/SubmitTx request type.
message MsgSubmitTx {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  // from_address is the address of the who wants to submit a transaction to the counterparty chain
  string from_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // interchain_account_id is the custom value used by the contract to identify the account
  string interchain_account_id = 2;
  // connection_id is the connection id between the two chains
  string connection_id = 3;
  // msgs are the messages to be submitted to the counterparty chain
  repeated google.protobuf.Any msgs = 4;
  // memo is the memo to be included in the packet
  string memo = 5;
  // timeout in seconds after which the packet times out
  uint64 timeout = 6;
}

// MsgSubmitTxResponse defines the response for Msg/SubmitTx
message MsgSubmitTxResponse {
  // sequence_id is the channel's sequence_id for outgoing ibc packet. Unique per a channel.
  uint64 sequence_id = 1;
  // channel is the channel id the transaction was submitted from
  string channel = 2;
}

// MsgUpdateParams is the MsgUpdateParams request type.
message MsgUpdateParams {
  option (amino.name) = "custodian/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the authority that is allowed to update the custodian module parameters.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params deines the module parmeters to update
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}


// MsgUpdateParamsResponse is the MsgUpdateParams response type.
message MsgUpdateParamsResponse {}