syntax = "proto3";
package archway.oracle.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "archway/oracle/v1/oracle.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/archway-network/archway/x/oracle/types";

// Msg defines the oracle Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // AggregateExchangeRatePrevote defines a method for submitting
  // aggregate exchange rate prevote
  rpc AggregateExchangeRatePrevote(MsgAggregateExchangeRatePrevote)
      returns (MsgAggregateExchangeRatePrevoteResponse) {
    option (google.api.http).post = "/archway/oracle/prevote";
  }

  // AggregateExchangeRateVote defines a method for submitting
  // aggregate exchange rate vote
  rpc AggregateExchangeRateVote(MsgAggregateExchangeRateVote)
      returns (MsgAggregateExchangeRateVoteResponse) {
    option (google.api.http).post = "/archway/oracle/vote";
  }

  // DelegateFeedConsent defines a method for delegating oracle voting rights
  // to another address known as a price feeder.
  // See https://github.com/NibiruChain/pricefeeder.
  rpc DelegateFeedConsent(MsgDelegateFeedConsent)
      returns (MsgDelegateFeedConsentResponse) {
    option (google.api.http).post = "/archway/oracle/feeder-delegate";
  }
}

// MsgAggregateExchangeRatePrevote represents a message to submit
// aggregate exchange rate prevote.
message MsgAggregateExchangeRatePrevote {
  option (cosmos.msg.v1.signer) = "feeder";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string hash = 1 [ (gogoproto.moretags) = "yaml:\"hash\"" ];
  // Feeder is the Bech32 address of the price feeder. A validator may
  // specify multiple price feeders by delegating them consent. The validator
  // address is also a valid feeder by default.
  string feeder = 2 [ (gogoproto.moretags) = "yaml:\"feeder\"" ];
  // Validator is the Bech32 address to which the prevote will be credited.
  string validator = 3 [ (gogoproto.moretags) = "yaml:\"validator\"" ];
}

// MsgAggregateExchangeRatePrevoteResponse defines the
// Msg/AggregateExchangeRatePrevote response type.
message MsgAggregateExchangeRatePrevoteResponse {}

// MsgAggregateExchangeRateVote represents a message to submit
// aggregate exchange rate vote.
message MsgAggregateExchangeRateVote {
  option (cosmos.msg.v1.signer) = "feeder";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string salt = 1 [ (gogoproto.moretags) = "yaml:\"salt\"" ];
  string exchange_rates = 2
      [ (gogoproto.moretags) = "yaml:\"exchange_rates\"" ];
  // Feeder is the Bech32 address of the price feeder. A validator may
  // specify multiple price feeders by delegating them consent. The validator
  // address is also a valid feeder by default.
  string feeder = 3 [ (gogoproto.moretags) = "yaml:\"feeder\"" ];
  // Validator is the Bech32 address to which the vote will be credited.
  string validator = 4 [ (gogoproto.moretags) = "yaml:\"validator\"" ];
}

// MsgAggregateExchangeRateVoteResponse defines the
// Msg/AggregateExchangeRateVote response type.
message MsgAggregateExchangeRateVoteResponse {}

// MsgDelegateFeedConsent represents a message to delegate oracle voting rights
// to another address.
message MsgDelegateFeedConsent {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string operator = 1 [ (gogoproto.moretags) = "yaml:\"operator\"" ];
  string delegate = 2 [ (gogoproto.moretags) = "yaml:\"delegate\"" ];
}

// MsgDelegateFeedConsentResponse defines the Msg/DelegateFeedConsent response
// type.
message MsgDelegateFeedConsentResponse {}
