syntax = "proto3";
package archway.cwregistry.v1;

option go_package = "github.com/archway-network/archway/x/cwregistry/types";

// CodeMetadata defines the metadata of a contract code
message CodeMetadata {
    // The Code ID of the deployed contract
    uint64 code_id = 1;
    // The information regarding the contract source codebase
    SourceMetadata source = 2;
    // The information regarding the image used to build and optimize the contract binary
    SourceBuilder source_builder = 3;
    // The JSON schema which specifies the interaction endpoints of the contract
    string schema = 4;
    // The contacts of the developers or security incidence handlers 
    repeated string contacts = 5;
}

// SourceMetadata defines the metadata of the source code of a contract
message SourceMetadata {
    // The link to the code repository. e.g https://github.com/archway-network/archway
    string repository = 1;
    // The tag of the commit message at which the binary was built and deployed. e.g v1.0.2
    string tag = 2;
    // The software license of the smart contract code. e.g Apache-2.0
    string license = 3;
}

// SourceBuilder defines the metadata of the builder used to build the contract binary
message SourceBuilder {
    // Docker image. e.g cosmwasm/rust-optimizer
    string image = 1; 
    // Docker image tag. e.g 0.12.6
    string tag = 2;
    // Name of the generated contract binary. e.g counter.wasm
    string contract_name = 3;
}


// // Params defines the module parameters.
// message Params {
//     // callback_gas_limit is the maximum gas that can be consumed by a callback.
//     uint64 callback_gas_limit = 1;
//     // max_block_reservation_limit is the maximum number of callbacks which can be registered in a given block. 
//     uint64 max_block_reservation_limit = 2;
//     // max_future_reservation_limit is the maximum number of blocks in the future that a contract can request a callback in.
//     uint64 max_future_reservation_limit = 3;
//     // block_reservation_fee_multiplier is used to calculate a part of the reservation fees which will need to be paid when requesting the callback. 
//     string block_reservation_fee_multiplier = 4 [(cosmos_proto.scalar) = "cosmos.Dec", (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (gogoproto.nullable) = false];
//     // future_reservation_fee_multiplier is used to calculate a part of the reservation fees which will need to be paid while requesting the callback. 
//     string future_reservation_fee_multiplier = 5 [(cosmos_proto.scalar) = "cosmos.Dec", (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (gogoproto.nullable) = false];
// }