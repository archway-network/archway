syntax = "proto3";

package archway.gastracker.v1;

option go_package = "github.com/archway-network/archway/x/gastracker/types";

import "gogoproto/gogo.proto";

import "cosmos/base/v1beta1/coin.proto";

// Denotes which operation consumed this gas
enum ContractOperation {
  // Invalid or unknown operation
  CONTRACT_OPERATION_UNSPECIFIED = 0;
  // Initialization of the contract
  CONTRACT_OPERATION_INSTANTIATION = 1;
  // Execution of the contract
  CONTRACT_OPERATION_EXECUTION = 2;
  // Querying the contract
  CONTRACT_OPERATION_QUERY = 3;
  // Migrating the contract
  CONTRACT_OPERATION_MIGRATE = 4;
  // IBC operation
  CONTRACT_OPERATION_IBC = 5;
  // Sudo operation
  CONTRACT_OPERATION_SUDO = 6;
  // Reply operation
  CONTRACT_OPERATION_REPLY = 7;
}

// Tracking contract gas usage and total gas consumption per transaction
message TransactionTracking {
  uint64 max_gas_allowed = 1;
  repeated cosmos.base.v1beta1.DecCoin max_contract_rewards = 3;
  repeated ContractGasTracking contract_tracking_infos = 4;
}

// Tracking contract gas usage
message ContractGasTracking {
  string address = 1;
  uint64 original_vm_gas = 2;
  uint64 original_sdk_gas = 3;
  ContractOperation operation = 4;
}

// Tracking gas consumption for all tx in a particular block
message BlockGasTracking { repeated TransactionTracking tx_tracking_infos = 1; }

// Contract instance metadata
message ContractInstanceMetadata {
  // Developer address of the contract
  string developer_address = 1;
  string reward_address = 2;
  bool gas_rebate_to_user = 3;
  // Flag to indicate whether to charge premium or not
  bool collect_premium = 4;
  // Percentage of gas consumed to be charged.
  uint64 premium_percentage_charged = 5;
}

// Reward entry per beneficiary address
message LeftOverRewardEntry {
  repeated cosmos.base.v1beta1.DecCoin contract_rewards = 1;
}

// Event emitted when Reward is allocated
message RewardDistributionEvent {
  string reward_address = 1;
  repeated cosmos.base.v1beta1.Coin contract_rewards = 2;
  repeated cosmos.base.v1beta1.DecCoin leftover_rewards = 3;
}

// Event emitted when contract reward is calculated
message ContractRewardCalculationEvent {
  string contract_address = 1;
  uint64 gas_consumed = 2;
  cosmos.base.v1beta1.DecCoin inflation_rewards = 3;
  repeated cosmos.base.v1beta1.DecCoin contract_rewards = 4;
  ContractInstanceMetadata metadata = 5;
}

// Genesis state of the Gastracker module
message GenesisState {}