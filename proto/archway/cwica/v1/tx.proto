syntax = "proto3";
package archway.cwica.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/api/http.proto";
import "google/protobuf/any.proto";
import "archway/cwica/v1/params.proto";

option go_package = "github.com/archway-network/archway/x/cwica/types";

// Msg defines the Msg service.
service Msg {
  // RegisterInterchainAccount registers an account on the counterparty chain.
  rpc RegisterInterchainAccount(MsgRegisterInterchainAccount)
      returns (MsgRegisterInterchainAccountResponse) {}
  // SendTx submits a transaction with msgs to the counterparty chain.
  rpc SendTx(MsgSendTx) returns (MsgSendTxResponse) {}
  // UpdateParams updates the cwica module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgRegisterInterchainAccount defines the Msg/RegisterInterchainAccount
// request type.
message MsgRegisterInterchainAccount {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  // contract_address is the address of the contrat who wants to register an ica
  // account on the counterparty chain
  string contract_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // connection_id is the connection id between the two chains
  string connection_id = 2 [ (gogoproto.moretags) = "yaml:\"connection_id\"" ];
}

// MsgRegisterInterchainAccountResponse defines the response for
// Msg/RegisterInterchainAccount
message MsgRegisterInterchainAccountResponse {}

// MsgSendTx defines the Msg/SendTx request type.
message MsgSendTx {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  // contract_address is the address of the who wants to submit a transaction to
  // the counterparty chain
  string contract_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // connection_id is the connection id between the two chains
  string connection_id = 2;
  // msgs are the messages to be submitted to the counterparty chain
  repeated google.protobuf.Any msgs = 3;
  // memo is the memo to be included in the packet
  string memo = 4;
  // timeout in seconds after which the packet times out
  uint64 timeout = 5;
}

// MsgSendTxResponse defines the response for Msg/SendTx
message MsgSendTxResponse {
  // sequence_id is the channel's sequence_id for outgoing ibc packet. Unique
  // per a channel.
  uint64 sequence_id = 1;
  // channel is the channel id the transaction was submitted from
  string channel = 2;
}

// MsgUpdateParams is the MsgUpdateParams request type.
message MsgUpdateParams {
  option (amino.name) = "cwica/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the authority that is allowed to update the
  // cwica module parameters.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params deines the module parmeters to update
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse is the MsgUpdateParams response type.
message MsgUpdateParamsResponse {}