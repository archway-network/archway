// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjsonB71c73e4DecodeGithubComArchwayNetworkVoterSrcTypes(in *jlexer.Lexer, out *MsgInstantiate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "params":
			(out.Params).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonB71c73e4EncodeGithubComArchwayNetworkVoterSrcTypes(out *jwriter.Writer, in MsgInstantiate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix[1:])
		(in.Params).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MsgInstantiate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonB71c73e4EncodeGithubComArchwayNetworkVoterSrcTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v MsgInstantiate) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonB71c73e4EncodeGithubComArchwayNetworkVoterSrcTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MsgInstantiate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonB71c73e4DecodeGithubComArchwayNetworkVoterSrcTypes(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *MsgInstantiate) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonB71c73e4DecodeGithubComArchwayNetworkVoterSrcTypes(l, v)
}
