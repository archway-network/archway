// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archway/oracle/v1/state.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_archway_network_archway_x_common_asset "github.com/archway-network/archway/x/common/asset"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// a snapshot of the prices at a given point in time
type PriceSnapshot struct {
	Pair  github_com_archway_network_archway_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/archway-network/archway/x/common/asset.Pair" json:"pair" yaml:"pair"`
	Price cosmossdk_io_math.LegacyDec                            `protobuf:"bytes,2,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	// milliseconds since unix epoch
	TimestampMs int64 `protobuf:"varint,3,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
}

func (m *PriceSnapshot) Reset()         { *m = PriceSnapshot{} }
func (m *PriceSnapshot) String() string { return proto.CompactTextString(m) }
func (*PriceSnapshot) ProtoMessage()    {}
func (*PriceSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f86ab5cb19be0ee7, []int{0}
}
func (m *PriceSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceSnapshot.Merge(m, src)
}
func (m *PriceSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *PriceSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_PriceSnapshot proto.InternalMessageInfo

func (m *PriceSnapshot) GetTimestampMs() int64 {
	if m != nil {
		return m.TimestampMs
	}
	return 0
}

func init() {
	proto.RegisterType((*PriceSnapshot)(nil), "archway.oracle.v1.PriceSnapshot")
}

func init() { proto.RegisterFile("archway/oracle/v1/state.proto", fileDescriptor_f86ab5cb19be0ee7) }

var fileDescriptor_f86ab5cb19be0ee7 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x13, 0x0a, 0x48, 0xa4, 0x30, 0x10, 0x31, 0x54, 0x05, 0xd2, 0x52, 0x96, 0x2e, 0xc4,
	0x8a, 0x90, 0x90, 0x60, 0xac, 0xd8, 0xa0, 0x52, 0x55, 0x36, 0x16, 0xf4, 0x62, 0xac, 0xc4, 0x6a,
	0x9d, 0x17, 0xd9, 0x8f, 0x96, 0xdc, 0x82, 0x63, 0x75, 0xec, 0x88, 0x18, 0x2a, 0xd4, 0xde, 0x80,
	0x13, 0xa0, 0x24, 0x86, 0x85, 0x85, 0xcd, 0xf6, 0x67, 0xff, 0x9f, 0xdf, 0xef, 0x9d, 0x82, 0xe6,
	0xe9, 0x1c, 0x0a, 0x86, 0x1a, 0xf8, 0x54, 0xb0, 0x59, 0xc4, 0x0c, 0x01, 0x89, 0x30, 0xd7, 0x48,
	0xe8, 0x1f, 0x5a, 0x1c, 0xd6, 0x38, 0x9c, 0x45, 0xed, 0xa3, 0x04, 0x13, 0xac, 0x28, 0x2b, 0x57,
	0xf5, 0xc5, 0xf6, 0x49, 0x82, 0x98, 0x4c, 0x05, 0x83, 0x5c, 0x32, 0xc8, 0x32, 0x24, 0x20, 0x89,
	0x99, 0xb1, 0x34, 0xf8, 0x6b, 0xb1, 0x81, 0x96, 0x73, 0x34, 0x0a, 0x0d, 0x8b, 0xc1, 0x94, 0x30,
	0x16, 0x04, 0x11, 0xe3, 0x28, 0xb3, 0x9a, 0xf7, 0x96, 0xae, 0x77, 0x30, 0xd2, 0x92, 0x8b, 0x87,
	0x0c, 0x72, 0x93, 0x22, 0xf9, 0xe0, 0x6d, 0xe7, 0x20, 0x75, 0xcb, 0xed, 0xba, 0xfd, 0xbd, 0xc1,
	0x70, 0xb1, 0xea, 0x38, 0x1f, 0xab, 0xce, 0x55, 0x22, 0x29, 0x7d, 0x89, 0x43, 0x8e, 0x8a, 0x59,
	0xe5, 0x45, 0x26, 0x68, 0x8e, 0x7a, 0xf2, 0xb3, 0x67, 0xaf, 0x8c, 0xa3, 0x52, 0x98, 0x31, 0x30,
	0x46, 0x50, 0x38, 0x02, 0xa9, 0xbf, 0x56, 0x9d, 0x66, 0x01, 0x6a, 0x7a, 0xd3, 0x2b, 0x33, 0x7b,
	0xe3, 0x2a, 0xda, 0xbf, 0xf6, 0x76, 0xf2, 0xd2, 0xd9, 0xda, 0xaa, 0x1c, 0xe7, 0xd6, 0x71, 0x5c,
	0xff, 0xd5, 0x3c, 0x4f, 0x42, 0x89, 0x4c, 0x01, 0xa5, 0xe1, 0xbd, 0x48, 0x80, 0x17, 0xb7, 0x82,
	0x8f, 0xeb, 0x17, 0xfe, 0x99, 0xb7, 0x4f, 0x52, 0x09, 0x43, 0xa0, 0xf2, 0x27, 0x65, 0x5a, 0x8d,
	0xae, 0xdb, 0x6f, 0x8c, 0x9b, 0xbf, 0x67, 0x43, 0x33, 0xb8, 0x5b, 0xac, 0x03, 0x77, 0xb9, 0x0e,
	0xdc, 0xcf, 0x75, 0xe0, 0xbe, 0x6d, 0x02, 0x67, 0xb9, 0x09, 0x9c, 0xf7, 0x4d, 0xe0, 0x3c, 0x46,
	0xff, 0x1a, 0xc2, 0x36, 0x49, 0x45, 0x2e, 0x4c, 0xbc, 0x5b, 0xd5, 0x74, 0xf9, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x0d, 0x42, 0x44, 0x68, 0xce, 0x01, 0x00, 0x00,
}

func (m *PriceSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimestampMs != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.TimestampMs))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PriceSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovState(uint64(l))
	if m.TimestampMs != 0 {
		n += 1 + sovState(uint64(m.TimestampMs))
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PriceSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMs", wireType)
			}
			m.TimestampMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
