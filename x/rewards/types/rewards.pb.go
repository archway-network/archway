// DONTCOVER
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archway/rewards/v1/rewards.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the module parameters.
type Params struct {
	// inflation_rewards_ratio defines the percentage of minted inflation tokens
	// that are used for dApp rewards [0.0, 1.0]. If set to 0.0, no inflation
	// rewards are distributed.
	InflationRewardsRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=inflation_rewards_ratio,json=inflationRewardsRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"inflation_rewards_ratio"`
	// tx_fee_rebate_ratio defines the percentage of tx fees that are used for
	// dApp rewards [0.0, 1.0]. If set to 0.0, no fee rewards are distributed.
	TxFeeRebateRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=tx_fee_rebate_ratio,json=txFeeRebateRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"tx_fee_rebate_ratio"`
	// max_withdraw_records defines the maximum number of RewardsRecord objects
	// used for the withdrawal operation.
	MaxWithdrawRecords uint64 `protobuf:"varint,3,opt,name=max_withdraw_records,json=maxWithdrawRecords,proto3" json:"max_withdraw_records,omitempty"`
	// min_price_of_gas defines the minimum price for each single unit of gas in
	// the network. during the min consensus fee ante handler we will be taking
	// the max between min consensus fee and minimum price of gas to compute the
	// minimum tx computational fees, which are independent from contract flat
	// fees (premiums)
	MinPriceOfGas types.DecCoin `protobuf:"bytes,4,opt,name=min_price_of_gas,json=minPriceOfGas,proto3" json:"min_price_of_gas"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_187c4abc9caff98d, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxWithdrawRecords() uint64 {
	if m != nil {
		return m.MaxWithdrawRecords
	}
	return 0
}

func (m *Params) GetMinPriceOfGas() types.DecCoin {
	if m != nil {
		return m.MinPriceOfGas
	}
	return types.DecCoin{}
}

// ContractMetadata defines the contract rewards distribution options for a
// particular contract.
type ContractMetadata struct {
	// contract_address defines the contract address (bech32 encoded).
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// owner_address is the contract owner address that can modify contract reward
	// options (bech32 encoded). That could be the contract admin or the contract
	// itself. If owner_address is set to contract address, contract can modify
	// the metadata on its own using WASM bindings.
	OwnerAddress string `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// rewards_address is an address to distribute rewards to (bech32 encoded).
	// If not set (empty), rewards are not distributed for this contract.
	RewardsAddress string `protobuf:"bytes,3,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	// withdraw_to_wallet is a flag that defines if rewards should be immediately
	// withdrawn to the wallet instead of creating a rewards record to be lazily
	// withdrawn after.
	WithdrawToWallet bool `protobuf:"varint,4,opt,name=withdraw_to_wallet,json=withdrawToWallet,proto3" json:"withdraw_to_wallet,omitempty"`
}

func (m *ContractMetadata) Reset()         { *m = ContractMetadata{} }
func (m *ContractMetadata) String() string { return proto.CompactTextString(m) }
func (*ContractMetadata) ProtoMessage()    {}
func (*ContractMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_187c4abc9caff98d, []int{1}
}
func (m *ContractMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractMetadata.Merge(m, src)
}
func (m *ContractMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ContractMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ContractMetadata proto.InternalMessageInfo

func (m *ContractMetadata) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ContractMetadata) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *ContractMetadata) GetRewardsAddress() string {
	if m != nil {
		return m.RewardsAddress
	}
	return ""
}

func (m *ContractMetadata) GetWithdrawToWallet() bool {
	if m != nil {
		return m.WithdrawToWallet
	}
	return false
}

// BlockRewards defines block related rewards distribution data.
type BlockRewards struct {
	// height defines the block height.
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// inflation_rewards is the rewards to be distributed.
	InflationRewards types.Coin `protobuf:"bytes,2,opt,name=inflation_rewards,json=inflationRewards,proto3" json:"inflation_rewards"`
	// max_gas defines the maximum gas for the block that is used to distribute
	// inflation rewards (consensus parameter).
	MaxGas uint64 `protobuf:"varint,3,opt,name=max_gas,json=maxGas,proto3" json:"max_gas,omitempty"`
}

func (m *BlockRewards) Reset()         { *m = BlockRewards{} }
func (m *BlockRewards) String() string { return proto.CompactTextString(m) }
func (*BlockRewards) ProtoMessage()    {}
func (*BlockRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_187c4abc9caff98d, []int{2}
}
func (m *BlockRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRewards.Merge(m, src)
}
func (m *BlockRewards) XXX_Size() int {
	return m.Size()
}
func (m *BlockRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRewards.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRewards proto.InternalMessageInfo

func (m *BlockRewards) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockRewards) GetInflationRewards() types.Coin {
	if m != nil {
		return m.InflationRewards
	}
	return types.Coin{}
}

func (m *BlockRewards) GetMaxGas() uint64 {
	if m != nil {
		return m.MaxGas
	}
	return 0
}

// TxRewards defines transaction related rewards distribution data.
type TxRewards struct {
	// tx_id is the tracking transaction ID (x/tracking is the data source for
	// this value).
	TxId uint64 `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// height defines the block height.
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// fee_rewards is the rewards to be distributed.
	FeeRewards []types.Coin `protobuf:"bytes,3,rep,name=fee_rewards,json=feeRewards,proto3" json:"fee_rewards"`
}

func (m *TxRewards) Reset()         { *m = TxRewards{} }
func (m *TxRewards) String() string { return proto.CompactTextString(m) }
func (*TxRewards) ProtoMessage()    {}
func (*TxRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_187c4abc9caff98d, []int{3}
}
func (m *TxRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxRewards.Merge(m, src)
}
func (m *TxRewards) XXX_Size() int {
	return m.Size()
}
func (m *TxRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_TxRewards.DiscardUnknown(m)
}

var xxx_messageInfo_TxRewards proto.InternalMessageInfo

func (m *TxRewards) GetTxId() uint64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

func (m *TxRewards) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxRewards) GetFeeRewards() []types.Coin {
	if m != nil {
		return m.FeeRewards
	}
	return nil
}

// RewardsRecord defines a record that is used to distribute rewards later (lazy
// distribution). This record is being created by the x/rewards EndBlocker and
// pruned after the rewards are distributed. An actual rewards x/bank transfer
// might be triggered by a Tx (via CLI for example) or by a contract via WASM
// bindings. For a contract to trigger rewards transfer, contract address must
// be set as the rewards_address in a corresponding ContractMetadata.
type RewardsRecord struct {
	// id is the unique ID of the record.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// rewards_address is the address to distribute rewards to (bech32 encoded).
	RewardsAddress string `protobuf:"bytes,2,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	// rewards are the rewards to be transferred later.
	Rewards []types.Coin `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards"`
	// calculated_height defines the block height of rewards calculation event.
	CalculatedHeight int64 `protobuf:"varint,4,opt,name=calculated_height,json=calculatedHeight,proto3" json:"calculated_height,omitempty"`
	// calculated_time defines the block time of rewards calculation event.
	CalculatedTime time.Time `protobuf:"bytes,5,opt,name=calculated_time,json=calculatedTime,proto3,stdtime" json:"calculated_time"`
}

func (m *RewardsRecord) Reset()         { *m = RewardsRecord{} }
func (m *RewardsRecord) String() string { return proto.CompactTextString(m) }
func (*RewardsRecord) ProtoMessage()    {}
func (*RewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_187c4abc9caff98d, []int{4}
}
func (m *RewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsRecord.Merge(m, src)
}
func (m *RewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *RewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsRecord proto.InternalMessageInfo

func (m *RewardsRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RewardsRecord) GetRewardsAddress() string {
	if m != nil {
		return m.RewardsAddress
	}
	return ""
}

func (m *RewardsRecord) GetRewards() []types.Coin {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *RewardsRecord) GetCalculatedHeight() int64 {
	if m != nil {
		return m.CalculatedHeight
	}
	return 0
}

func (m *RewardsRecord) GetCalculatedTime() time.Time {
	if m != nil {
		return m.CalculatedTime
	}
	return time.Time{}
}

// FlatFee defines the flat fee for a particular contract.
type FlatFee struct {
	// contract_address defines the contract address (bech32 encoded).
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// flat_fee defines the minimum flat fee set by the contract_owner
	FlatFee types.Coin `protobuf:"bytes,2,opt,name=flat_fee,json=flatFee,proto3" json:"flat_fee"`
}

func (m *FlatFee) Reset()         { *m = FlatFee{} }
func (m *FlatFee) String() string { return proto.CompactTextString(m) }
func (*FlatFee) ProtoMessage()    {}
func (*FlatFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_187c4abc9caff98d, []int{5}
}
func (m *FlatFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlatFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlatFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlatFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlatFee.Merge(m, src)
}
func (m *FlatFee) XXX_Size() int {
	return m.Size()
}
func (m *FlatFee) XXX_DiscardUnknown() {
	xxx_messageInfo_FlatFee.DiscardUnknown(m)
}

var xxx_messageInfo_FlatFee proto.InternalMessageInfo

func (m *FlatFee) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *FlatFee) GetFlatFee() types.Coin {
	if m != nil {
		return m.FlatFee
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*Params)(nil), "archway.rewards.v1.Params")
	proto.RegisterType((*ContractMetadata)(nil), "archway.rewards.v1.ContractMetadata")
	proto.RegisterType((*BlockRewards)(nil), "archway.rewards.v1.BlockRewards")
	proto.RegisterType((*TxRewards)(nil), "archway.rewards.v1.TxRewards")
	proto.RegisterType((*RewardsRecord)(nil), "archway.rewards.v1.RewardsRecord")
	proto.RegisterType((*FlatFee)(nil), "archway.rewards.v1.FlatFee")
}

func init() { proto.RegisterFile("archway/rewards/v1/rewards.proto", fileDescriptor_187c4abc9caff98d) }

var fileDescriptor_187c4abc9caff98d = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x4f, 0xdb, 0x4c,
	0x10, 0x8e, 0x93, 0x90, 0xc0, 0xf2, 0x15, 0x0c, 0xef, 0x4b, 0xe0, 0x7d, 0x95, 0x44, 0xe9, 0xa1,
	0x54, 0x2d, 0x76, 0x43, 0x4f, 0xed, 0xa9, 0x0d, 0x88, 0xb6, 0x2a, 0xa8, 0xc8, 0x42, 0x42, 0xea,
	0xc5, 0xdd, 0xac, 0x37, 0xce, 0x0a, 0xdb, 0x1b, 0xad, 0x17, 0x6c, 0xfa, 0x1f, 0x2a, 0xf1, 0x63,
	0x7a, 0xe9, 0x3f, 0xe0, 0x88, 0xaa, 0x1e, 0xaa, 0x1e, 0x68, 0x05, 0x3f, 0xa4, 0xd5, 0x7e, 0x05,
	0xda, 0x72, 0x80, 0xde, 0x3c, 0x33, 0xcf, 0xce, 0x3c, 0xf3, 0xcc, 0x78, 0x40, 0x0b, 0x32, 0x34,
	0xc8, 0xe0, 0x91, 0xcb, 0x70, 0x06, 0x59, 0x90, 0xba, 0x87, 0x1d, 0xf3, 0xe9, 0x0c, 0x19, 0xe5,
	0xd4, 0xb6, 0x35, 0xc2, 0x31, 0xee, 0xc3, 0xce, 0xf2, 0x42, 0x48, 0x43, 0x2a, 0xc3, 0xae, 0xf8,
	0x52, 0xc8, 0xe5, 0x66, 0x48, 0x69, 0x18, 0x61, 0x57, 0x5a, 0xbd, 0x83, 0xbe, 0xcb, 0x49, 0x8c,
	0x53, 0x0e, 0xe3, 0xa1, 0x06, 0x34, 0x10, 0x4d, 0x63, 0x9a, 0xba, 0x3d, 0x98, 0x62, 0xf7, 0xb0,
	0xd3, 0xc3, 0x1c, 0x76, 0x5c, 0x44, 0x49, 0xa2, 0xe3, 0x4b, 0x2a, 0xee, 0xab, 0xcc, 0xca, 0x50,
	0xa1, 0xf6, 0xe7, 0x22, 0xa8, 0xec, 0x40, 0x06, 0xe3, 0xd4, 0x26, 0x60, 0x91, 0x24, 0xfd, 0x08,
	0x72, 0x42, 0x13, 0x5f, 0x93, 0xf2, 0x99, 0x30, 0xeb, 0x56, 0xcb, 0x5a, 0x99, 0xe8, 0x76, 0x4e,
	0xce, 0x9a, 0x85, 0xaf, 0x67, 0xcd, 0xff, 0x54, 0x86, 0x34, 0xd8, 0x77, 0x08, 0x75, 0x63, 0xc8,
	0x07, 0xce, 0x16, 0x0e, 0x21, 0x3a, 0xda, 0xc0, 0xe8, 0xd3, 0x87, 0x55, 0xa0, 0x0b, 0x6c, 0x60,
	0xe4, 0xfd, 0x33, 0xca, 0xe8, 0xa9, 0x84, 0x9e, 0x30, 0xec, 0xb7, 0x60, 0x9e, 0xe7, 0x7e, 0x1f,
	0x63, 0x9f, 0xe1, 0x1e, 0xe4, 0x58, 0x97, 0x29, 0xfe, 0x6d, 0x99, 0x1a, 0xcf, 0x37, 0x31, 0xf6,
	0x64, 0x2e, 0x55, 0xe1, 0x21, 0x58, 0x88, 0x61, 0xee, 0x67, 0x84, 0x0f, 0x02, 0x06, 0x33, 0x9f,
	0x61, 0x44, 0x59, 0x90, 0xd6, 0x4b, 0x2d, 0x6b, 0xa5, 0xec, 0xd9, 0x31, 0xcc, 0xf7, 0x74, 0xc8,
	0x53, 0x11, 0xfb, 0x15, 0xa8, 0xc5, 0x24, 0xf1, 0x87, 0x8c, 0x20, 0xec, 0xd3, 0xbe, 0x1f, 0xc2,
	0xb4, 0x5e, 0x6e, 0x59, 0x2b, 0x93, 0x6b, 0xff, 0x3b, 0xba, 0x94, 0xd0, 0xd7, 0xd1, 0xfa, 0x8a,
	0xba, 0xeb, 0x94, 0x24, 0xdd, 0xb2, 0xa0, 0xeb, 0x4d, 0xc7, 0x24, 0xd9, 0x11, 0x4f, 0x5f, 0xf7,
	0x9f, 0xc3, 0xb4, 0xfd, 0xd1, 0x02, 0xb5, 0x75, 0x9a, 0x70, 0x06, 0x11, 0xdf, 0xc6, 0x1c, 0x06,
	0x90, 0x43, 0xfb, 0x1e, 0xa8, 0x21, 0xed, 0xf3, 0x61, 0x10, 0x30, 0x9c, 0xa6, 0x4a, 0x59, 0x6f,
	0xd6, 0xf8, 0x9f, 0x29, 0xb7, 0x7d, 0x07, 0x4c, 0xd3, 0x2c, 0xc1, 0x6c, 0x84, 0x93, 0xd2, 0x78,
	0x53, 0xd2, 0x69, 0x40, 0x77, 0xc1, 0xac, 0x19, 0x93, 0x81, 0x95, 0x24, 0x6c, 0x46, 0xbb, 0x0d,
	0xf0, 0x01, 0xb0, 0x47, 0x42, 0x70, 0xea, 0x67, 0x30, 0x8a, 0x30, 0x97, 0xcd, 0x8d, 0x7b, 0x35,
	0x13, 0xd9, 0xa5, 0x7b, 0xd2, 0xdf, 0x7e, 0x6f, 0x81, 0xa9, 0x6e, 0x44, 0xd1, 0xbe, 0x1e, 0x99,
	0xfd, 0x2f, 0xa8, 0x0c, 0x30, 0x09, 0x07, 0x5c, 0xb2, 0x2d, 0x79, 0xda, 0xb2, 0xb7, 0xc0, 0xdc,
	0x1f, 0x0b, 0x23, 0x89, 0x4e, 0xae, 0x2d, 0x5d, 0x2b, 0xd9, 0x15, 0xbd, 0x6a, 0xbf, 0x2f, 0x86,
	0xbd, 0x08, 0xaa, 0x62, 0x62, 0x42, 0x76, 0x35, 0xa4, 0x4a, 0x0c, 0x73, 0xa1, 0xe5, 0x3b, 0x30,
	0xb1, 0x9b, 0x1b, 0xd4, 0x3c, 0x18, 0xe3, 0xb9, 0x4f, 0x02, 0x49, 0xa5, 0xec, 0x95, 0x79, 0xfe,
	0x32, 0xb8, 0x42, 0xb0, 0xf8, 0x0b, 0xc1, 0xa7, 0x60, 0x52, 0xed, 0x98, 0xa2, 0x56, 0x6a, 0x95,
	0x6e, 0x42, 0x0d, 0xf4, 0xc5, 0x2a, 0xc9, 0x27, 0xed, 0x1f, 0x16, 0x98, 0x36, 0x9b, 0x2b, 0xf7,
	0xc4, 0x9e, 0x01, 0xc5, 0x51, 0xf5, 0x22, 0x09, 0xae, 0x1b, 0x42, 0xf1, 0xda, 0x21, 0x3c, 0x06,
	0xd5, 0x5b, 0x12, 0x31, 0x78, 0xfb, 0x3e, 0x98, 0x43, 0x30, 0x42, 0x07, 0x11, 0xe4, 0x38, 0xf0,
	0x75, 0xab, 0x65, 0xd9, 0x6a, 0xed, 0x32, 0xf0, 0x42, 0x35, 0xbd, 0x0d, 0x66, 0xaf, 0x80, 0xc5,
	0xa9, 0xa8, 0x8f, 0xc9, 0x99, 0x2c, 0x3b, 0xea, 0x8e, 0x38, 0xe6, 0x8e, 0x38, 0xbb, 0xe6, 0x8e,
	0x74, 0xc7, 0x45, 0xc1, 0xe3, 0x6f, 0x4d, 0xcb, 0x9b, 0xb9, 0x7c, 0x2c, 0xc2, 0xed, 0x21, 0xa8,
	0x6e, 0x46, 0x90, 0x6f, 0x62, 0x7c, 0x9b, 0xfd, 0x7d, 0x02, 0xc6, 0xc5, 0x78, 0xc5, 0x2f, 0x7e,
	0xd3, 0x8d, 0xa8, 0xf6, 0x55, 0x99, 0xee, 0xd6, 0xc9, 0x79, 0xc3, 0x3a, 0x3d, 0x6f, 0x58, 0xdf,
	0xcf, 0x1b, 0xd6, 0xf1, 0x45, 0xa3, 0x70, 0x7a, 0xd1, 0x28, 0x7c, 0xb9, 0x68, 0x14, 0xde, 0xac,
	0x85, 0x84, 0x0f, 0x0e, 0x7a, 0x0e, 0xa2, 0xb1, 0xab, 0xaf, 0xe7, 0x6a, 0x82, 0x79, 0x46, 0xd9,
	0xbe, 0xb1, 0xdd, 0x7c, 0x74, 0x71, 0xf9, 0xd1, 0x10, 0xa7, 0xbd, 0x8a, 0xec, 0xf6, 0xd1, 0xcf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0xfd, 0xb6, 0x5a, 0x91, 0x05, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinPriceOfGas.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.MaxWithdrawRecords != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.MaxWithdrawRecords))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.TxFeeRebateRatio.Size()
		i -= size
		if _, err := m.TxFeeRebateRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.InflationRewardsRatio.Size()
		i -= size
		if _, err := m.InflationRewardsRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ContractMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawToWallet {
		i--
		if m.WithdrawToWallet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.RewardsAddress) > 0 {
		i -= len(m.RewardsAddress)
		copy(dAtA[i:], m.RewardsAddress)
		i = encodeVarintRewards(dAtA, i, uint64(len(m.RewardsAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintRewards(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintRewards(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxGas != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.MaxGas))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.InflationRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Height != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeRewards) > 0 {
		for iNdEx := len(m.FeeRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewards(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.TxId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.TxId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CalculatedTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CalculatedTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintRewards(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	if m.CalculatedHeight != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.CalculatedHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewards(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RewardsAddress) > 0 {
		i -= len(m.RewardsAddress)
		copy(dAtA[i:], m.RewardsAddress)
		i = encodeVarintRewards(dAtA, i, uint64(len(m.RewardsAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlatFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlatFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlatFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FlatFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintRewards(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRewards(dAtA []byte, offset int, v uint64) int {
	offset -= sovRewards(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InflationRewardsRatio.Size()
	n += 1 + l + sovRewards(uint64(l))
	l = m.TxFeeRebateRatio.Size()
	n += 1 + l + sovRewards(uint64(l))
	if m.MaxWithdrawRecords != 0 {
		n += 1 + sovRewards(uint64(m.MaxWithdrawRecords))
	}
	l = m.MinPriceOfGas.Size()
	n += 1 + l + sovRewards(uint64(l))
	return n
}

func (m *ContractMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovRewards(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovRewards(uint64(l))
	}
	l = len(m.RewardsAddress)
	if l > 0 {
		n += 1 + l + sovRewards(uint64(l))
	}
	if m.WithdrawToWallet {
		n += 2
	}
	return n
}

func (m *BlockRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovRewards(uint64(m.Height))
	}
	l = m.InflationRewards.Size()
	n += 1 + l + sovRewards(uint64(l))
	if m.MaxGas != 0 {
		n += 1 + sovRewards(uint64(m.MaxGas))
	}
	return n
}

func (m *TxRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovRewards(uint64(m.TxId))
	}
	if m.Height != 0 {
		n += 1 + sovRewards(uint64(m.Height))
	}
	if len(m.FeeRewards) > 0 {
		for _, e := range m.FeeRewards {
			l = e.Size()
			n += 1 + l + sovRewards(uint64(l))
		}
	}
	return n
}

func (m *RewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRewards(uint64(m.Id))
	}
	l = len(m.RewardsAddress)
	if l > 0 {
		n += 1 + l + sovRewards(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovRewards(uint64(l))
		}
	}
	if m.CalculatedHeight != 0 {
		n += 1 + sovRewards(uint64(m.CalculatedHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CalculatedTime)
	n += 1 + l + sovRewards(uint64(l))
	return n
}

func (m *FlatFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovRewards(uint64(l))
	}
	l = m.FlatFee.Size()
	n += 1 + l + sovRewards(uint64(l))
	return n
}

func sovRewards(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRewards(x uint64) (n int) {
	return sovRewards(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationRewardsRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflationRewardsRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFeeRebateRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxFeeRebateRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWithdrawRecords", wireType)
			}
			m.MaxWithdrawRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWithdrawRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPriceOfGas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinPriceOfGas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawToWallet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawToWallet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflationRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGas", wireType)
			}
			m.MaxGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRewards = append(m.FeeRewards, types.Coin{})
			if err := m.FeeRewards[len(m.FeeRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculatedHeight", wireType)
			}
			m.CalculatedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CalculatedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CalculatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlatFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlatFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlatFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlatFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FlatFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRewards(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRewards
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRewards
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRewards
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRewards        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRewards          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRewards = fmt.Errorf("proto: unexpected end of group")
)
