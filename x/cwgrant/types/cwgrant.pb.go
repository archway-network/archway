// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archway/cwgrant/v1/cwgrant.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterAsGranter allows a contract to register itself as a fee granter.
type MsgRegisterAsGranter struct {
	GrantingContract string `protobuf:"bytes,1,opt,name=granting_contract,json=grantingContract,proto3" json:"granting_contract,omitempty"`
}

func (m *MsgRegisterAsGranter) Reset()         { *m = MsgRegisterAsGranter{} }
func (m *MsgRegisterAsGranter) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAsGranter) ProtoMessage()    {}
func (*MsgRegisterAsGranter) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998e53fdadd5709, []int{0}
}
func (m *MsgRegisterAsGranter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAsGranter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAsGranter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAsGranter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAsGranter.Merge(m, src)
}
func (m *MsgRegisterAsGranter) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAsGranter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAsGranter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAsGranter proto.InternalMessageInfo

func (m *MsgRegisterAsGranter) GetGrantingContract() string {
	if m != nil {
		return m.GrantingContract
	}
	return ""
}

// MsgRegisterAsGranterResponse defines the response of RegisterAsGranter.
type MsgRegisterAsGranterResponse struct {
}

func (m *MsgRegisterAsGranterResponse) Reset()         { *m = MsgRegisterAsGranterResponse{} }
func (m *MsgRegisterAsGranterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAsGranterResponse) ProtoMessage()    {}
func (*MsgRegisterAsGranterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998e53fdadd5709, []int{1}
}
func (m *MsgRegisterAsGranterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAsGranterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAsGranterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAsGranterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAsGranterResponse.Merge(m, src)
}
func (m *MsgRegisterAsGranterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAsGranterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAsGranterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAsGranterResponse proto.InternalMessageInfo

// IsGrantingContract is the request type of IsGrantingContract RPC.
type IsGrantingContractRequest struct {
	// contract_address defines the address of the contract
	// which we want to check if it is a granter or not.
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *IsGrantingContractRequest) Reset()         { *m = IsGrantingContractRequest{} }
func (m *IsGrantingContractRequest) String() string { return proto.CompactTextString(m) }
func (*IsGrantingContractRequest) ProtoMessage()    {}
func (*IsGrantingContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998e53fdadd5709, []int{2}
}
func (m *IsGrantingContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsGrantingContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsGrantingContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsGrantingContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsGrantingContractRequest.Merge(m, src)
}
func (m *IsGrantingContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsGrantingContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsGrantingContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsGrantingContractRequest proto.InternalMessageInfo

func (m *IsGrantingContractRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// IsGrantingContractResponse is the response type of IsGRantingContract RPC.
type IsGrantingContractResponse struct {
	// is_granting_contract report if the contract is a granter or not.
	IsGrantingContract bool `protobuf:"varint,1,opt,name=is_granting_contract,json=isGrantingContract,proto3" json:"is_granting_contract,omitempty"`
}

func (m *IsGrantingContractResponse) Reset()         { *m = IsGrantingContractResponse{} }
func (m *IsGrantingContractResponse) String() string { return proto.CompactTextString(m) }
func (*IsGrantingContractResponse) ProtoMessage()    {}
func (*IsGrantingContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998e53fdadd5709, []int{3}
}
func (m *IsGrantingContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsGrantingContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsGrantingContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsGrantingContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsGrantingContractResponse.Merge(m, src)
}
func (m *IsGrantingContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsGrantingContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsGrantingContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsGrantingContractResponse proto.InternalMessageInfo

func (m *IsGrantingContractResponse) GetIsGrantingContract() bool {
	if m != nil {
		return m.IsGrantingContract
	}
	return false
}

// GenesisState represents the genesis state of the cwgrant module.
type GenesisState struct {
	GrantingContracts []string `protobuf:"bytes,1,rep,name=granting_contracts,json=grantingContracts,proto3" json:"granting_contracts,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998e53fdadd5709, []int{4}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetGrantingContracts() []string {
	if m != nil {
		return m.GrantingContracts
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgRegisterAsGranter)(nil), "archway.cwgrant.v1.MsgRegisterAsGranter")
	proto.RegisterType((*MsgRegisterAsGranterResponse)(nil), "archway.cwgrant.v1.MsgRegisterAsGranterResponse")
	proto.RegisterType((*IsGrantingContractRequest)(nil), "archway.cwgrant.v1.IsGrantingContractRequest")
	proto.RegisterType((*IsGrantingContractResponse)(nil), "archway.cwgrant.v1.IsGrantingContractResponse")
	proto.RegisterType((*GenesisState)(nil), "archway.cwgrant.v1.GenesisState")
}

func init() { proto.RegisterFile("archway/cwgrant/v1/cwgrant.proto", fileDescriptor_e998e53fdadd5709) }

var fileDescriptor_e998e53fdadd5709 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0x1b, 0xca, 0xff, 0x8f, 0x5d, 0x04, 0xdb, 0xa5, 0xa8, 0x0d, 0x12, 0x4a, 0x4e, 0x55,
	0x69, 0xd2, 0xd6, 0x9b, 0xe0, 0xa1, 0x0a, 0x16, 0xc1, 0x0a, 0xc6, 0x9b, 0x1e, 0x4a, 0x9a, 0x8e,
	0xdb, 0xa0, 0xc9, 0xd6, 0x9d, 0x4d, 0x6b, 0xc0, 0x93, 0x4f, 0xe0, 0xa3, 0xf8, 0x18, 0x1e, 0x7b,
	0xf4, 0x28, 0xed, 0xc1, 0xd7, 0x90, 0x36, 0x89, 0x88, 0x89, 0xd0, 0x5b, 0xf2, 0xed, 0xb7, 0xbf,
	0x99, 0xf9, 0x76, 0x48, 0xd5, 0x16, 0xce, 0x70, 0x62, 0x87, 0xa6, 0x33, 0x61, 0xc2, 0xf6, 0xa5,
	0x39, 0x6e, 0x26, 0x9f, 0xc6, 0x48, 0x70, 0xc9, 0x29, 0x8d, 0x1d, 0x46, 0x22, 0x8f, 0x9b, 0x6a,
	0x85, 0x71, 0xce, 0xee, 0xc1, 0x5c, 0x3a, 0xfa, 0xc1, 0xad, 0x69, 0xfb, 0x61, 0x64, 0x57, 0xb7,
	0x1c, 0x8e, 0x1e, 0x47, 0xd3, 0x43, 0xb6, 0x60, 0x79, 0xc8, 0xa2, 0x03, 0xfd, 0x86, 0x94, 0xbb,
	0xc8, 0x2c, 0x60, 0x2e, 0x4a, 0x10, 0x6d, 0xec, 0x2c, 0x60, 0x20, 0xe8, 0x3e, 0x29, 0x2d, 0xb9,
	0xae, 0xcf, 0x7a, 0x0e, 0xf7, 0xa5, 0xb0, 0x1d, 0xb9, 0xad, 0x54, 0x95, 0x5a, 0xc1, 0x2a, 0x26,
	0x07, 0x27, 0xb1, 0x7e, 0xb8, 0xf9, 0xfc, 0xf9, 0xba, 0x97, 0xf6, 0xeb, 0x1a, 0xd9, 0xc9, 0x82,
	0x5b, 0x80, 0x23, 0xee, 0x23, 0xe8, 0xa7, 0xa4, 0x72, 0x16, 0x89, 0x3f, 0x68, 0x16, 0x3c, 0x04,
	0x80, 0x92, 0xee, 0x92, 0x62, 0x02, 0xea, 0xd9, 0x83, 0x81, 0x00, 0xc4, 0xb8, 0x81, 0x8d, 0x44,
	0x6f, 0x47, 0xb2, 0x7e, 0x41, 0xd4, 0x2c, 0x4e, 0x54, 0x85, 0x36, 0x48, 0xd9, 0xc5, 0x5e, 0xf6,
	0x34, 0x6b, 0x16, 0x75, 0x53, 0x37, 0xf5, 0x23, 0xb2, 0xde, 0x01, 0x1f, 0xd0, 0xc5, 0x2b, 0x69,
	0x4b, 0xa0, 0x75, 0x42, 0x53, 0xd7, 0x17, 0xcd, 0xe4, 0x6b, 0x05, 0xab, 0xf4, 0x3b, 0x0d, 0x6c,
	0x8d, 0x49, 0xbe, 0x8b, 0x8c, 0x72, 0x52, 0x4a, 0xe7, 0x5a, 0x33, 0xd2, 0x0f, 0x67, 0x64, 0x85,
	0xa4, 0x36, 0x56, 0x75, 0x26, 0x83, 0xb6, 0x9e, 0xc8, 0xbf, 0xcb, 0x00, 0x44, 0x48, 0x91, 0xd0,
	0x74, 0x1e, 0xb4, 0x9e, 0x05, 0xfc, 0x33, 0x7f, 0xd5, 0x58, 0xd5, 0x1e, 0x55, 0x3f, 0x3e, 0x7f,
	0x9b, 0x69, 0xca, 0x74, 0xa6, 0x29, 0x1f, 0x33, 0x4d, 0x79, 0x99, 0x6b, 0xb9, 0xe9, 0x5c, 0xcb,
	0xbd, 0xcf, 0xb5, 0xdc, 0x75, 0x8b, 0xb9, 0x72, 0x18, 0xf4, 0x0d, 0x87, 0x7b, 0x66, 0xcc, 0xac,
	0xfb, 0x20, 0x27, 0x5c, 0xdc, 0x25, 0xff, 0xe6, 0xe3, 0xf7, 0xaa, 0xcb, 0x70, 0x04, 0xd8, 0xff,
	0xbf, 0x5c, 0xcf, 0x83, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0xdb, 0xe6, 0x20, 0x0a, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterAsGranter allows a cosmwasm contract to register itself as a fee granter.
	RegisterAsGranter(ctx context.Context, in *MsgRegisterAsGranter, opts ...grpc.CallOption) (*MsgRegisterAsGranterResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterAsGranter(ctx context.Context, in *MsgRegisterAsGranter, opts ...grpc.CallOption) (*MsgRegisterAsGranterResponse, error) {
	out := new(MsgRegisterAsGranterResponse)
	err := c.cc.Invoke(ctx, "/archway.cwgrant.v1.Msg/RegisterAsGranter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterAsGranter allows a cosmwasm contract to register itself as a fee granter.
	RegisterAsGranter(context.Context, *MsgRegisterAsGranter) (*MsgRegisterAsGranterResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterAsGranter(ctx context.Context, req *MsgRegisterAsGranter) (*MsgRegisterAsGranterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAsGranter not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterAsGranter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAsGranter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAsGranter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.cwgrant.v1.Msg/RegisterAsGranter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAsGranter(ctx, req.(*MsgRegisterAsGranter))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "archway.cwgrant.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAsGranter",
			Handler:    _Msg_RegisterAsGranter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archway/cwgrant/v1/cwgrant.proto",
}

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// IsGrantingContract can be used to check if a contract is a granting contract.
	IsGrantingContract(ctx context.Context, in *IsGrantingContractRequest, opts ...grpc.CallOption) (*IsGrantingContractResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) IsGrantingContract(ctx context.Context, in *IsGrantingContractRequest, opts ...grpc.CallOption) (*IsGrantingContractResponse, error) {
	out := new(IsGrantingContractResponse)
	err := c.cc.Invoke(ctx, "/archway.cwgrant.v1.Query/IsGrantingContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// IsGrantingContract can be used to check if a contract is a granting contract.
	IsGrantingContract(context.Context, *IsGrantingContractRequest) (*IsGrantingContractResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) IsGrantingContract(ctx context.Context, req *IsGrantingContractRequest) (*IsGrantingContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGrantingContract not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_IsGrantingContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsGrantingContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsGrantingContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.cwgrant.v1.Query/IsGrantingContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsGrantingContract(ctx, req.(*IsGrantingContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "archway.cwgrant.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsGrantingContract",
			Handler:    _Query_IsGrantingContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archway/cwgrant/v1/cwgrant.proto",
}

func (m *MsgRegisterAsGranter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAsGranter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAsGranter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GrantingContract) > 0 {
		i -= len(m.GrantingContract)
		copy(dAtA[i:], m.GrantingContract)
		i = encodeVarintCwgrant(dAtA, i, uint64(len(m.GrantingContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAsGranterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAsGranterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAsGranterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *IsGrantingContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsGrantingContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsGrantingContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintCwgrant(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsGrantingContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsGrantingContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsGrantingContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsGrantingContract {
		i--
		if m.IsGrantingContract {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GrantingContracts) > 0 {
		for iNdEx := len(m.GrantingContracts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GrantingContracts[iNdEx])
			copy(dAtA[i:], m.GrantingContracts[iNdEx])
			i = encodeVarintCwgrant(dAtA, i, uint64(len(m.GrantingContracts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCwgrant(dAtA []byte, offset int, v uint64) int {
	offset -= sovCwgrant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterAsGranter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GrantingContract)
	if l > 0 {
		n += 1 + l + sovCwgrant(uint64(l))
	}
	return n
}

func (m *MsgRegisterAsGranterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IsGrantingContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovCwgrant(uint64(l))
	}
	return n
}

func (m *IsGrantingContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsGrantingContract {
		n += 2
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GrantingContracts) > 0 {
		for _, s := range m.GrantingContracts {
			l = len(s)
			n += 1 + l + sovCwgrant(uint64(l))
		}
	}
	return n
}

func sovCwgrant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCwgrant(x uint64) (n int) {
	return sovCwgrant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterAsGranter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCwgrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAsGranter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAsGranter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantingContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCwgrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCwgrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCwgrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrantingContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCwgrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCwgrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAsGranterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCwgrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAsGranterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAsGranterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCwgrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCwgrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsGrantingContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCwgrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsGrantingContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsGrantingContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCwgrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCwgrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCwgrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCwgrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCwgrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsGrantingContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCwgrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsGrantingContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsGrantingContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGrantingContract", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCwgrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGrantingContract = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCwgrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCwgrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCwgrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantingContracts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCwgrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCwgrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCwgrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrantingContracts = append(m.GrantingContracts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCwgrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCwgrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCwgrant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCwgrant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCwgrant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCwgrant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCwgrant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCwgrant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCwgrant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCwgrant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCwgrant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCwgrant = fmt.Errorf("proto: unexpected end of group")
)
