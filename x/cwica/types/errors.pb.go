// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archway/cwica/v1/errors.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ModuleErrors defines the module level error codes
type ModuleErrors int32

const (
	// ERR_UNKNOWN is the default error code
	ModuleErrors_ERR_UNKNOWN ModuleErrors = 0
	// ERR_PACKET_TIMEOUT is the error code for packet timeout
	ModuleErrors_ERR_PACKET_TIMEOUT ModuleErrors = 1
	// ERR_EXEC_FAILURE is the error code for tx execution failure
	ModuleErrors_ERR_EXEC_FAILURE ModuleErrors = 2
)

var ModuleErrors_name = map[int32]string{
	0: "ERR_UNKNOWN",
	1: "ERR_PACKET_TIMEOUT",
	2: "ERR_EXEC_FAILURE",
}

var ModuleErrors_value = map[string]int32{
	"ERR_UNKNOWN":        0,
	"ERR_PACKET_TIMEOUT": 1,
	"ERR_EXEC_FAILURE":   2,
}

func (x ModuleErrors) String() string {
	return proto.EnumName(ModuleErrors_name, int32(x))
}

func (ModuleErrors) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c2771426f64e6ac7, []int{0}
}

// Sudo defines the sudo message for the error callback
type SudoError struct {
	// error_code is the module level error code
	ErrorCode ModuleErrors `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=archway.cwica.v1.ModuleErrors" json:"error_code,omitempty"`
	// payload is any input which caused the error
	InputPayload string `protobuf:"bytes,2,opt,name=input_payload,json=inputPayload,proto3" json:"input_payload,omitempty"`
	// error_msg is the error message
	ErrorMsg string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (m *SudoError) Reset()         { *m = SudoError{} }
func (m *SudoError) String() string { return proto.CompactTextString(m) }
func (*SudoError) ProtoMessage()    {}
func (*SudoError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2771426f64e6ac7, []int{0}
}
func (m *SudoError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SudoError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SudoError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SudoError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SudoError.Merge(m, src)
}
func (m *SudoError) XXX_Size() int {
	return m.Size()
}
func (m *SudoError) XXX_DiscardUnknown() {
	xxx_messageInfo_SudoError.DiscardUnknown(m)
}

var xxx_messageInfo_SudoError proto.InternalMessageInfo

func (m *SudoError) GetErrorCode() ModuleErrors {
	if m != nil {
		return m.ErrorCode
	}
	return ModuleErrors_ERR_UNKNOWN
}

func (m *SudoError) GetInputPayload() string {
	if m != nil {
		return m.InputPayload
	}
	return ""
}

func (m *SudoError) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func init() {
	proto.RegisterEnum("archway.cwica.v1.ModuleErrors", ModuleErrors_name, ModuleErrors_value)
	proto.RegisterType((*SudoError)(nil), "archway.cwica.v1.SudoError")
}

func init() { proto.RegisterFile("archway/cwica/v1/errors.proto", fileDescriptor_c2771426f64e6ac7) }

var fileDescriptor_c2771426f64e6ac7 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4d, 0x2c, 0x4a, 0xce,
	0x28, 0x4f, 0xac, 0xd4, 0x4f, 0x2e, 0xcf, 0x4c, 0x4e, 0xd4, 0x2f, 0x33, 0xd4, 0x4f, 0x2d, 0x2a,
	0xca, 0x2f, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80, 0x4a, 0xeb, 0x81, 0xa5,
	0xf5, 0xca, 0x0c, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x92, 0xfa, 0x20, 0x16, 0x44, 0x9d,
	0x52, 0x0f, 0x23, 0x17, 0x67, 0x70, 0x69, 0x4a, 0xbe, 0x2b, 0x48, 0xb3, 0x90, 0x2d, 0x17, 0x17,
	0xd8, 0x94, 0xf8, 0xe4, 0xfc, 0x94, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x39, 0x3d,
	0x74, 0xa3, 0xf4, 0x7c, 0xf3, 0x53, 0x4a, 0x73, 0x52, 0xc1, 0x5a, 0x8a, 0x83, 0x38, 0xc1, 0x3a,
	0x9c, 0xf3, 0x53, 0x52, 0x85, 0x94, 0xb9, 0x78, 0x33, 0xf3, 0x0a, 0x4a, 0x4b, 0xe2, 0x0b, 0x12,
	0x2b, 0x73, 0xf2, 0x13, 0x53, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x78, 0xc0, 0x82, 0x01,
	0x10, 0x31, 0x21, 0x69, 0x2e, 0x88, 0x8e, 0xf8, 0xdc, 0xe2, 0x74, 0x09, 0x66, 0xb0, 0x02, 0x0e,
	0xb0, 0x80, 0x6f, 0x71, 0xba, 0x96, 0x2f, 0x17, 0x0f, 0xb2, 0xe1, 0x42, 0xfc, 0x5c, 0xdc, 0xae,
	0x41, 0x41, 0xf1, 0xa1, 0x7e, 0xde, 0x7e, 0xfe, 0xe1, 0x7e, 0x02, 0x0c, 0x42, 0x62, 0x5c, 0x42,
	0x20, 0x81, 0x00, 0x47, 0x67, 0x6f, 0xd7, 0x90, 0xf8, 0x10, 0x4f, 0x5f, 0x57, 0xff, 0xd0, 0x10,
	0x01, 0x46, 0x21, 0x11, 0x2e, 0x01, 0x90, 0xb8, 0x6b, 0x84, 0xab, 0x73, 0xbc, 0x9b, 0xa3, 0xa7,
	0x4f, 0x68, 0x90, 0xab, 0x00, 0x93, 0x93, 0xd7, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb,
	0x31, 0x44, 0x19, 0xa4, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x43, 0xfd,
	0xa7, 0x9b, 0x97, 0x5a, 0x52, 0x9e, 0x5f, 0x94, 0x0d, 0xe3, 0xeb, 0x57, 0x40, 0xc3, 0xb6, 0xa4,
	0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0x1c, 0x60, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c,
	0x47, 0xa9, 0x58, 0x79, 0x01, 0x00, 0x00,
}

func (m *SudoError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SudoError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SudoError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintErrors(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InputPayload) > 0 {
		i -= len(m.InputPayload)
		copy(dAtA[i:], m.InputPayload)
		i = encodeVarintErrors(dAtA, i, uint64(len(m.InputPayload)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrorCode != 0 {
		i = encodeVarintErrors(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintErrors(dAtA []byte, offset int, v uint64) int {
	offset -= sovErrors(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SudoError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovErrors(uint64(m.ErrorCode))
	}
	l = len(m.InputPayload)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	return n
}

func sovErrors(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErrors(x uint64) (n int) {
	return sovErrors(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SudoError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SudoError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SudoError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= ModuleErrors(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrors(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErrors
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErrors
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErrors
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErrors        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrors          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErrors = fmt.Errorf("proto: unexpected end of group")
)
